import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useProject } from '../context/ProjectContext';
import SafeIcon from '../common/SafeIcon';
import * as FiIcons from 'react-icons/fi';

const { FiBox, FiCode, FiDownload, FiPlay, FiSettings } = FiIcons;

const DockerfileGenerator = () => {
  const { state, dispatch } = useProject();
  const [customizations, setCustomizations] = useState({
    baseImage: 'node:18-alpine',
    port: '3000',
    workdir: '/app',
    installCommand: 'npm install',
    buildCommand: 'npm run build',
    startCommand: 'npm start'
  });

  // Update recommended settings based on tech stack
  useEffect(() => {
    if (state.techStack) {
      const language = state.techStack.language || '';
      const frameworks = state.techStack.frameworks || [];
      
      let newCustomizations = { ...customizations };
      
      // Set base image based on language
      if (language.toLowerCase() === 'python') {
        newCustomizations.baseImage = 'python:3.9-alpine';
        newCustomizations.installCommand = 'pip install -r requirements.txt';
        newCustomizations.startCommand = 'python app.py';
        newCustomizations.port = '5000';
      } else if (language.toLowerCase() === 'php') {
        newCustomizations.baseImage = 'php:8.1-apache';
        newCustomizations.installCommand = 'composer install';
        newCustomizations.startCommand = 'apache2-foreground';
        newCustomizations.port = '80';
      } else if (language.toLowerCase() === 'java') {
        newCustomizations.baseImage = 'openjdk:11-jre-slim';
        newCustomizations.installCommand = './mvnw install';
        newCustomizations.buildCommand = './mvnw package';
        newCustomizations.startCommand = 'java -jar target/*.jar';
        newCustomizations.port = '8080';
      } else if (language.toLowerCase() === 'ruby') {
        newCustomizations.baseImage = 'ruby:3.0-alpine';
        newCustomizations.installCommand = 'bundle install';
        newCustomizations.startCommand = 'ruby app.rb';
        newCustomizations.port = '4567';
      } else {
        // Default to Node.js
        newCustomizations.baseImage = 'node:18-alpine';
        newCustomizations.installCommand = 'npm install';
        newCustomizations.buildCommand = 'npm run build';
        newCustomizations.startCommand = 'npm start';
        newCustomizations.port = '3000';
      }
      
      // Adjust for specific frameworks
      if (frameworks.includes('react')) {
        newCustomizations.buildCommand = 'npm run build';
        newCustomizations.startCommand = 'npx serve -s build';
      } else if (frameworks.includes('vue')) {
        newCustomizations.buildCommand = 'npm run build';
        newCustomizations.startCommand = 'npx serve -s dist';
      } else if (frameworks.includes('next')) {
        newCustomizations.buildCommand = 'npm run build';
        newCustomizations.startCommand = 'npm start';
      } else if (frameworks.includes('django')) {
        newCustomizations.startCommand = 'python manage.py runserver 0.0.0.0:8000';
        newCustomizations.port = '8000';
      } else if (frameworks.includes('flask')) {
        newCustomizations.startCommand = 'flask run --host=0.0.0.0';
        newCustomizations.port = '5000';
      }
      
      setCustomizations(newCustomizations);
    }
  }, [state.techStack]);

  const generateDockerfile = async () => {
    if (!state.currentProject) {
      dispatch({ type: 'SET_ERROR', payload: 'Please analyze a project first' });
      return;
    }

    dispatch({ type: 'SET_GENERATING', payload: true });
    dispatch({ type: 'ADD_LOG', payload: { type: 'info', message: 'Generating Dockerfile...' } });

    try {
      // Add short delay to show loading state
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const dockerfile = generateDockerfileContent();
      dispatch({ type: 'SET_DOCKERFILE', payload: dockerfile });
      dispatch({ 
        type: 'ADD_LOG', 
        payload: { 
          type: 'success', 
          message: 'Dockerfile generated successfully!' 
        } 
      });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error.message });
      dispatch({ 
        type: 'ADD_LOG', 
        payload: { 
          type: 'error', 
          message: `Error: ${error.message}` 
        } 
      });
    } finally {
      dispatch({ type: 'SET_GENERATING', payload: false });
    }
  };

  const generateDockerfileContent = () => {
    const { baseImage, port, workdir, installCommand, buildCommand, startCommand } = customizations;
    const language = state.techStack?.language?.toLowerCase() || 'javascript';
    
    let dockerfile = `# Generated by Agentic AI System for ${state.currentProject?.name || 'Unknown Project'}\n`;
    dockerfile += `# Detected language: ${state.techStack?.language || 'Unknown'}\n`;
    
    if (state.techStack?.frameworks?.length > 0) {
      dockerfile += `# Detected frameworks: ${state.techStack.frameworks.join(', ')}\n`;
    }
    
    dockerfile += `\nFROM ${baseImage}\n\n`;
    
    // Add any necessary global installations
    if (language === 'javascript' || language === 'typescript') {
      if (startCommand.includes('serve')) {
        dockerfile += `# Install serve for production static file serving\n`;
        dockerfile += `RUN npm install -g serve\n\n`;
      }
    }
    
    dockerfile += `# Set working directory\n`;
    dockerfile += `WORKDIR ${workdir}\n\n`;
    
    // Copy dependency files first for better caching
    if (language === 'javascript' || language === 'typescript') {
      dockerfile += `# Copy package files\n`;
      dockerfile += `COPY package*.json ./\n\n`;
    } else if (language === 'python') {
      dockerfile += `# Copy requirements file\n`;
      dockerfile += `COPY requirements.txt ./\n\n`;
    } else if (language === 'ruby') {
      dockerfile += `# Copy Gemfile\n`;
      dockerfile += `COPY Gemfile Gemfile.lock ./\n\n`;
    } else if (language === 'php') {
      dockerfile += `# Copy composer files\n`;
      dockerfile += `COPY composer.json composer.lock ./\n\n`;
    }
    
    dockerfile += `# Install dependencies\n`;
    dockerfile += `RUN ${installCommand}\n\n`;
    
    dockerfile += `# Copy source code\n`;
    dockerfile += `COPY . .\n\n`;
    
    if (buildCommand && buildCommand !== 'skip') {
      dockerfile += `# Build application\n`;
      dockerfile += `RUN ${buildCommand}\n\n`;
    }
    
    dockerfile += `# Expose port\n`;
    dockerfile += `EXPOSE ${port}\n\n`;
    
    dockerfile += `# Health check\n`;
    dockerfile += `HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n`;
    
    if (language === 'javascript' || language === 'typescript') {
      dockerfile += `  CMD wget -qO- http://localhost:${port} || exit 1\n\n`;
    } else if (language === 'python') {
      dockerfile += `  CMD wget -qO- http://localhost:${port} || exit 1\n\n`;
    } else if (language === 'java') {
      dockerfile += `  CMD wget -qO- http://localhost:${port}/actuator/health || exit 1\n\n`;
    } else {
      dockerfile += `  CMD wget -qO- http://localhost:${port} || exit 1\n\n`;
    }
    
    // Handle start command differently based on format
    if (startCommand.includes(' ')) {
      const parts = startCommand.split(' ');
      dockerfile += `# Start application\n`;
      dockerfile += `CMD ["${parts[0]}"`;
      for (let i = 1; i < parts.length; i++) {
        dockerfile += `, "${parts[i]}"`;
      }
      dockerfile += `]\n`;
    } else {
      dockerfile += `# Start application\n`;
      dockerfile += `CMD ["${startCommand}"]\n`;
    }
    
    return dockerfile;
  };

  const downloadDockerfile = () => {
    const element = document.createElement('a');
    const file = new Blob([state.dockerfile], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = 'Dockerfile';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  if (!state.currentProject) {
    return (
      <div className="flex flex-col items-center justify-center min-h-96 text-center">
        <SafeIcon icon={FiBox} className="w-16 h-16 text-dark-500 mb-4" />
        <h2 className="text-2xl font-bold text-white mb-2">No Project Analyzed</h2>
        <p className="text-dark-400 mb-6">Please analyze a project first to generate a Dockerfile</p>
        <button
          onClick={() => window.location.hash = '/analyze'}
          className="px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-all duration-200"
        >
          Analyze Project
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center"
      >
        <h1 className="text-3xl font-bold text-white mb-4">Dockerfile Generator</h1>
        <p className="text-dark-300">Generate optimized Dockerfiles based on your project's tech stack</p>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-dark-800 rounded-xl p-6 border border-dark-700"
        >
          <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
            <SafeIcon icon={FiSettings} className="w-5 h-5 mr-2 text-primary-400" />
            Configuration
          </h3>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-dark-400 mb-2">Base Image</label>
              <select
                value={customizations.baseImage}
                onChange={(e) => setCustomizations({ ...customizations, baseImage: e.target.value })}
                className="w-full px-3 py-2 bg-dark-700 text-white rounded-lg border border-dark-600 focus:border-primary-500 focus:outline-none"
              >
                <option value="node:18-alpine">Node.js 18 Alpine</option>
                <option value="node:18">Node.js 18</option>
                <option value="python:3.9-alpine">Python 3.9 Alpine</option>
                <option value="python:3.9">Python 3.9</option>
                <option value="openjdk:11-jre-slim">Java 11 JRE</option>
                <option value="php:8.1-apache">PHP 8.1 Apache</option>
                <option value="ruby:3.0-alpine">Ruby 3.0 Alpine</option>
                <option value="golang:1.19-alpine">Go 1.19 Alpine</option>
                <option value="nginx:alpine">Nginx Alpine</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-dark-400 mb-2">Port</label>
              <input
                type="text"
                value={customizations.port}
                onChange={(e) => setCustomizations({ ...customizations, port: e.target.value })}
                className="w-full px-3 py-2 bg-dark-700 text-white rounded-lg border border-dark-600 focus:border-primary-500 focus:outline-none"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-dark-400 mb-2">Working Directory</label>
              <input
                type="text"
                value={customizations.workdir}
                onChange={(e) => setCustomizations({ ...customizations, workdir: e.target.value })}
                className="w-full px-3 py-2 bg-dark-700 text-white rounded-lg border border-dark-600 focus:border-primary-500 focus:outline-none"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-dark-400 mb-2">Install Command</label>
              <input
                type="text"
                value={customizations.installCommand}
                onChange={(e) => setCustomizations({ ...customizations, installCommand: e.target.value })}
                className="w-full px-3 py-2 bg-dark-700 text-white rounded-lg border border-dark-600 focus:border-primary-500 focus:outline-none"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-dark-400 mb-2">Build Command</label>
              <input
                type="text"
                value={customizations.buildCommand}
                onChange={(e) => setCustomizations({ ...customizations, buildCommand: e.target.value })}
                className="w-full px-3 py-2 bg-dark-700 text-white rounded-lg border border-dark-600 focus:border-primary-500 focus:outline-none"
              />
              <p className="text-xs text-dark-500 mt-1">Use "skip" to skip the build step</p>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-dark-400 mb-2">Start Command</label>
              <input
                type="text"
                value={customizations.startCommand}
                onChange={(e) => setCustomizations({ ...customizations, startCommand: e.target.value })}
                className="w-full px-3 py-2 bg-dark-700 text-white rounded-lg border border-dark-600 focus:border-primary-500 focus:outline-none"
              />
            </div>
          </div>
          
          <button
            onClick={generateDockerfile}
            disabled={state.isGenerating}
            className="w-full mt-6 px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2 transition-all duration-200"
          >
            {state.isGenerating ? (
              <>
                <SafeIcon icon={FiPlay} className="w-4 h-4 animate-spin" />
                <span>Generating...</span>
              </>
            ) : (
              <>
                <SafeIcon icon={FiCode} className="w-4 h-4" />
                <span>Generate Dockerfile</span>
              </>
            )}
          </button>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-dark-800 rounded-xl p-6 border border-dark-700"
        >
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-xl font-semibold text-white flex items-center">
              <SafeIcon icon={FiBox} className="w-5 h-5 mr-2 text-primary-400" />
              Generated Dockerfile
            </h3>
            
            {state.dockerfile && (
              <button
                onClick={downloadDockerfile}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2 transition-all duration-200"
              >
                <SafeIcon icon={FiDownload} className="w-4 h-4" />
                <span>Download</span>
              </button>
            )}
          </div>
          
          <div className="bg-dark-900 rounded-lg p-4 font-mono text-sm max-h-96 overflow-y-auto">
            {state.dockerfile ? (
              <pre className="text-dark-200 whitespace-pre-wrap">{state.dockerfile}</pre>
            ) : (
              <div className="text-dark-500 text-center py-8">
                <SafeIcon icon={FiCode} className="w-12 h-12 mx-auto mb-4" />
                <p>Click "Generate Dockerfile" to create your Docker configuration</p>
              </div>
            )}
          </div>
        </motion.div>
      </div>

      {state.logs.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-dark-800 rounded-xl p-6 border border-dark-700"
        >
          <h3 className="text-xl font-semibold text-white mb-4">Generation Logs</h3>
          <div className="bg-dark-900 rounded-lg p-4 font-mono text-sm max-h-64 overflow-y-auto">
            {state.logs.map((log, index) => (
              <div key={index} className={`mb-2 ${
                log.type === 'error' ? 'text-red-400' : 
                log.type === 'success' ? 'text-green-400' : 
                'text-dark-300'
              }`}>
                <span className="text-dark-500">[{new Date().toLocaleTimeString()}]</span> {log.message}
              </div>
            ))}
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default DockerfileGenerator;